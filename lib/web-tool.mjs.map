{"version":3,"file":"web-tool.mjs","sources":["../package/cookie/index.ts","../package/typeof/index.ts","../package/index.ts"],"sourcesContent":["/**\n * @Author: forguo\n * @Date: 2023/1/5 20:22\n * @Description: index.js\n */\nconst setCookie = () => {\n    console.log('setCookie')\n}\n\nexport {\n    setCookie\n}\n","/**\n * @Author: forguo\n * @Date: 2023/1/5 20:22\n * @Description: 类型判断\n */\n\n/**\n * 用 call 的方式获取类型\n * @param {*} val 要验证的实例\n * @returns\n * *   '[object Object]',\n * *   '[object Array]',\n * *   '[object Map]',\n * *   '[object Set]',\n * *   '[object Function]',\n * *   '[object AsyncFunction]',\n * *   '[object Promise]',\n * *   '[object Symbol]',\n * *   '[object String]',\n * *   '[object Number]',\n * *   '[object BigInt]',\n * *   '[object RegExp]',\n * *   '[object Date]',\n * *   '[object Math]',\n * *   '[object Null]',\n * *   '[object Undefined]'\n * *   其他\n */\nconst toTypeString = (val: any) => {\n    return Object.prototype.toString.call(val)\n}\n\n/**\n * 获取具体类型\n * @param {*} val 要验证的实例\n * @returns\n * *   'function',\n * *   'async',\n * *   'object',\n * *   'array',\n * *   'string',\n * *   'number',\n * *   'bigInt',\n * *   'regExp',\n * *   'date',\n * *   'map',\n * *   'set',\n * *   'promise',\n * *   'symbol',\n * *   'math',\n * *   'null',\n * *   'undefined'\n * *   其他\n */\nconst typeName = (val: any) => {\n    return Object.prototype.toString.call(val).replace(/^\\[object (\\S+)\\]$/, '$1').toLowerCase()\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nconst hasOwn = (val: any, key: any) => hasOwnProperty.call(val, key)\n\n/**\n *  验证普通函数\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isFunction = (val: any) => toTypeString(val) === '[object Function]'\n\n/**\n * 验证 async 的函数\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isAsync = (val: any) => toTypeString(val) === '[object asyncFunction]'\n\n/**\n * 验证 Object，不含 null\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isObject = (val: any) => val !== null && typeof val === 'object'\n\n/**\n *  验证数组\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isArray = Array.isArray\n\n/**\n * 验证字符串\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isString = (val: any) => typeof val === 'string'\n\n/**\n * 验证 number\n * @param {*} val 要验证的对象\n * @returns\n */\n\nconst isNumber = (val: any) => typeof val === 'number'\n\n/**\n * 验证 BigInt\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isBigInt = (val: any) => typeof val === 'bigint'\n\n/**\n * 验证 boolean\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isBoolean = (val: any) => typeof val === 'boolean'\n\n/**\n * 验证正则类型\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isRegExp = (val: any) => toTypeString(val) === '[object RegExp]'\n/**\n * 验证日期\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isDate = (val: any) => val instanceof Date\n\n/**\n * 验证 map\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isMap = (val: any) => toTypeString(val) === '[object Map]'\n/**\n * 验证 set\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isSet = (val: any) => toTypeString(val) === '[object Set]'\n/**\n *  验证 Promise\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isPromise = (val: any) => toTypeString(val) === '[object Promise]'\n/**\n * 验证 Symbol\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isSymbol = (val: any) => typeof val === 'symbol'\n\n/**\n * null 或者 undefined 返回 true\n * @param {*} val 要验证的对象\n * @returns\n */\nconst isNullOrUndefined = (val: any) => {\n    if (val === null) return true\n    return typeof val === 'undefined';\n}\n\nexport {\n    toTypeString, // Object.prototype.toString.call(val)\n    typeName, // 获取可以识别的名称\n    hasOwnProperty,\n    hasOwn,\n    isFunction, // 验证普通函数\n    isAsync, // 验证 async 的函数\n    isObject, // 验证 Object\n    isArray, // 验证数组\n    isString, // 验证字符串\n    isNumber, // 验证 number\n    isBigInt, // 验证 BigInt\n    isBoolean, // 验证 布尔\n    isRegExp, // 验证正则类型\n    isDate, // 验证日期\n    isMap, // 验证 map\n    isSet, // 验证 set\n    isPromise, // 验证 Promise\n    isSymbol, // 验证 Symbol\n    isNullOrUndefined // null 或者 undefined 返回 true\n}\n","/**\n * @Author: forguo\n * @Date: 2023/1/5 20:22\n * @Description: web-tool\n */\n\nlet modules: any = {}\n\n// 匹配到的文件默认是懒加载的，通过动态导入实现，并会在构建时分离为独立的 chunk。如果你倾向于直接引入所有的模块（例如依赖于这些模块中的副作用首先被应用），你可以传入 { eager: true } 作为第二个参数：\nconst packages = import.meta.glob(`../package/*/*.ts`, { eager: true })\n\n// 动态加载路由\nfor (const modulePath in packages) {\n    const currentModule = packages[modulePath] as Object\n    modules = {\n        ...modules,\n        ...currentModule\n    }\n}\n\nexport default modules\n// 导出除了default的命名\nexport * from './typeof'\nexport * from './cookie'\n"],"names":["setCookie","toTypeString","val","typeName","hasOwnProperty","hasOwn","key","isFunction","isAsync","isObject","isArray","isString","isNumber","isBigInt","isBoolean","isRegExp","isDate","isMap","isSet","isPromise","isSymbol","isNullOrUndefined","modules","packages","modulePath","currentModule","modules$1"],"mappings":";;8CAKMA,IAAY,MAAM;AACpB,UAAQ,IAAI,WAAW;AAC3B;;;;;8CCqBMC,IAAe,CAACC,MACX,OAAO,UAAU,SAAS,KAAKA,CAAG,GAyBvCC,IAAW,CAACD,MACP,OAAO,UAAU,SAAS,KAAKA,CAAG,EAAE,QAAQ,sBAAsB,IAAI,EAAE,YAAY,GAGzFE,IAAiB,OAAO,UAAU,gBAClCC,IAAS,CAACH,GAAUI,MAAaF,EAAe,KAAKF,GAAKI,CAAG,GAO7DC,IAAa,CAACL,MAAaD,EAAaC,CAAG,MAAM,qBAOjDM,IAAU,CAACN,MAAaD,EAAaC,CAAG,MAAM,0BAO9CO,IAAW,CAACP,MAAaA,MAAQ,QAAQ,OAAOA,KAAQ,UAOxDQ,IAAU,MAAM,SAOhBC,IAAW,CAACT,MAAa,OAAOA,KAAQ,UAQxCU,IAAW,CAACV,MAAa,OAAOA,KAAQ,UAOxCW,IAAW,CAACX,MAAa,OAAOA,KAAQ,UAOxCY,IAAY,CAACZ,MAAa,OAAOA,KAAQ,WAOzCa,IAAW,CAACb,MAAaD,EAAaC,CAAG,MAAM,mBAM/Cc,IAAS,CAACd,MAAaA,aAAe,MAOtCe,IAAQ,CAACf,MAAaD,EAAaC,CAAG,MAAM,gBAM5CgB,IAAQ,CAAChB,MAAaD,EAAaC,CAAG,MAAM,gBAM5CiB,IAAY,CAACjB,MAAaD,EAAaC,CAAG,MAAM,oBAMhDkB,IAAW,CAAClB,MAAa,OAAOA,KAAQ,UAOxCmB,IAAoB,CAACnB,MACnBA,MAAQ,OAAa,KAClB,OAAOA,IAAQ;;;;;;;;;;;;;;;;;;;;;;AC7J1B,IAAIoB,IAAe,CAAA;AAGnB,MAAMC;AAGN,WAAWC,KAAcD,GAAU;AAC/B,QAAME,IAAgBF,EAASC;AACrB,EAAAF,IAAA;AAAA,IACN,GAAGA;AAAA,IACH,GAAGG;AAAA,EAAA;AAEX;AAEA,MAAAC,IAAeJ;"}